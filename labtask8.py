# -*- coding: utf-8 -*-
"""labtask8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pM8Vgr3sdbsj9rB4jJPDu5YthsL7Ek7W
"""

from collections.abc import ByteString
import math

def evaluate(brd):

 for row in brd:
   if row[0]==row[1]==row[2]:
     if row[0]=='X': return 10
     if row[0]=='0':return -10

   for col in range(3):
     if brd [0][col]==brd[1][col]==brd[2][col]:
        if brd [0][col] == 'X': return 10

 if brd [0][0] == brd[1][1] == brd[2][2]:
     if brd [0][0] == 'X': return 10
     if brd[0][0] == '0': return -10
 if brd [0][2] == brd [1][1] == brd [2][0]:
     if brd [0][2] == 'X': return 10
     if brd [0][2] == '0': return -10
 return 0

 def is_move_left(brd):
  for row in brd:
    if '_'in row:
      return True
  return False

 def minimax (brd, depth, is_max):
  if score == 10: return score - depth
  if score ==-10: return score + depth
  if not is_move_left(brd): return 0

  if is_max:
    best = -math.inf

    for i in range(3):
      for j in range(3):
        if brd [i][j]== '_':

          brd [i][j] = 'X'

          best= max(best, minimax(brd,depth + 1,not is_max))
          brd[i][j]= '_'
      return best

  else:
     best = math.inf

 for i in range(3):
  for j in range(3):
    if brd[i][j] == '_':
       brd[i][j]=0

       best= min(best,minimax(brd, depth +1, not is_max))

       brd[i][j]='_'
    return Best

 def find_best_move(brd):

   best_val =-math.inf
   best_move = (-1,1
                )
   for i in range(3):
    for j in range(3):
     if brd[i][j]=='_':
      brd[i][j] ='X'

      move_val = minimax(brd,0, False)

      if move_val > best_val:
         best_val = move_val
         best_move =(i,j)

         return best_move

 if __name__ == "__main__":

    board = [
        ['X', 'O', 'X'],
        ['O', 'O', '_'],
        ['_', '_', '_']
    ]

    best_move = find_best_move(board)
    print(f"The best move is at row {best_move[0]} and column {best_move[1]}")